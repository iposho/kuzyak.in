'use client';

import { useState } from 'react';
import css from './NewsletterSignup.module.scss';

interface NewsletterSignupProps {
  title?: string;
  description?: string;
  placeholder?: string;
  buttonText?: string;
  successMessage?: string;
  errorMessage?: string;
}

export function NewsletterSignup({
  title = '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É',
  description = '–ü–æ–ª—É—á–∞–π—Ç–µ –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –ø—Ä—è–º–æ –Ω–∞ –ø–æ—á—Ç—É. –ë–µ–∑ —Å–ø–∞–º–∞, —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.',
  placeholder = '–í–∞—à email',
  buttonText = '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è',
  successMessage = '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.',
  errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
}: NewsletterSignupProps) {
  const [email, setEmail] = useState('');
  const [status, setStatus] = useState<'idle' | 'loading' | 'success' | 'error'>('idle');
  const [message, setMessage] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!email || !email.includes('@')) {
      setStatus('error');
      setMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
      return;
    }

    setStatus('loading');
    setMessage('');

    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Å–µ—Ä–≤–∏—Å–æ–º —Ä–∞—Å—Å—ã–ª–æ–∫ (Mailchimp, ConvertKit, etc.)
      const response = await fetch('/api/newsletter/subscribe', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email }),
      });

      if (response.ok) {
        setStatus('success');
        setMessage(successMessage);
        setEmail('');
      } else {
        throw new Error('Subscription failed');
      }
    } catch (error) {
      setStatus('error');
      setMessage(errorMessage);
    }
  };

  return (
    <div className={css.newsletterSignup}>
      <div className={css.content}>
        <h3 className={css.title}>{title}</h3>
        <p className={css.description}>{description}</p>

        <form onSubmit={handleSubmit} className={css.form}>
          <div className={css.inputGroup}>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder={placeholder}
              className={css.input}
              disabled={status === 'loading'}
              required
            />
            <button
              type="submit"
              className={css.button}
              disabled={status === 'loading'}
            >
              {status === 'loading' ? '‚è≥' : 'üìß'}
              {status === 'loading' ? '–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º...' : buttonText}
            </button>
          </div>
        </form>

        {message && (
          <div className={`${css.message} ${css[status]}`}>
            {message}
          </div>
        )}

        <p className={css.privacy}>
          üîí –ú—ã —É–≤–∞–∂–∞–µ–º –≤–∞—à—É –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å. –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.
        </p>
      </div>
    </div>
  );
}
