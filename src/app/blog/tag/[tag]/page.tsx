import { Metadata } from 'next';
import Link from 'next/link';
import { notFound } from 'next/navigation';
import { getAllTags, getPostsByTagPaginated } from '@/lib/blog';
import { Pagination } from '@/components/ui/Pagination';

import css from '../../page.module.scss';

interface TagPageProps {
  params: {
    tag: string;
  };
  searchParams: {
    page?: string;
  };
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Ç–µ–≥–æ–≤
export async function generateStaticParams() {
  const tags = getAllTags();

  return tags.map((tag) => ({
    tag: encodeURIComponent(tag),
  }));
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è SEO
export async function generateMetadata({ params }: TagPageProps): Promise<Metadata> {
  const tag = decodeURIComponent(params.tag);
  const siteUrl = process.env.NEXT_PUBLIC_SITE_URL || 'https://kuzyak.in';
  const tagUrl = `${siteUrl}/blog/tag/${params.tag}`;

  return {
    title: `–ü–æ—Å—Ç—ã —Å —Ç–µ–≥–æ–º #${tag} | –ë–ª–æ–≥ –ü–∞–≤–ª–∞ –ö—É–∑—è–∫–∏–Ω–∞`,
    description: `–í—Å–µ —Å—Ç–∞—Ç—å–∏ —Å —Ç–µ–≥–æ–º #${tag} –Ω–∞ –±–ª–æ–≥–µ –ü–∞–≤–ª–∞ –ö—É–∑—è–∫–∏–Ω–∞. –ß–∏—Ç–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö.`,
    keywords: `${tag}, –±–ª–æ–≥, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏`,
    openGraph: {
      title: `–ü–æ—Å—Ç—ã —Å —Ç–µ–≥–æ–º #${tag}`,
      description: `–í—Å–µ —Å—Ç–∞—Ç—å–∏ —Å —Ç–µ–≥–æ–º #${tag} –Ω–∞ –±–ª–æ–≥–µ –ü–∞–≤–ª–∞ –ö—É–∑—è–∫–∏–Ω–∞.`,
      url: tagUrl,
      siteName: 'kuzyak.in',
      type: 'website',
    },
    twitter: {
      card: 'summary_large_image',
      title: `–ü–æ—Å—Ç—ã —Å —Ç–µ–≥–æ–º #${tag}`,
      description: `–í—Å–µ —Å—Ç–∞—Ç—å–∏ —Å —Ç–µ–≥–æ–º #${tag} –Ω–∞ –±–ª–æ–≥–µ –ü–∞–≤–ª–∞ –ö—É–∑—è–∫–∏–Ω–∞.`,
    },
    alternates: {
      canonical: tagUrl,
    },
  };
}

export default async function TagPage({ params, searchParams }: TagPageProps) {
  const tag = decodeURIComponent(params.tag);
  const currentPage = parseInt(searchParams.page || '1', 10);
  const limit = 6;

  const { posts, totalPages } = getPostsByTagPaginated(tag, currentPage, limit);

  // –ï—Å–ª–∏ –ø–æ—Å—Ç–æ–≤ —Å —ç—Ç–∏–º —Ç–µ–≥–æ–º –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 404
  if (posts.length === 0 && currentPage === 1) {
    notFound();
  }

  const formatDate = (dateString: string) => new Date(dateString).toLocaleDateString('ru-RU', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });

  return (
    <div className={css.blogPage}>
      <div className={css.header}>
        <h1>
          –ü–æ—Å—Ç—ã —Å —Ç–µ–≥–æ–º #
          {tag}
        </h1>
        <p>
          –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤:
          {posts.length}
        </p>
      </div>

      {posts.length === 0 ? (
        <div className={css.emptyState}>
          <h3>–ü–æ—Å—Ç–æ–≤ —Å —ç—Ç–∏–º —Ç–µ–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–≥</p>
        </div>
      ) : (
        <div className={css.postsGrid}>
          {posts.map((post) => (
            <article key={post.slug} className={css.postCard}>
              {post.metadata.featured_image && (
                <div className={css.postImage}>
                  <img
                    src={post.metadata.featured_image}
                    alt={post.metadata.title}
                    loading="lazy"
                  />
                </div>
              )}

              <div className={css.postContent}>
                <div className={css.postHeader}>
                  <h2 className={css.postTitle}>
                    <Link href={`/blog/${post.slug}`}>
                      {post.metadata.title}
                    </Link>
                  </h2>
                  <div className={css.postMeta}>
                    <div className={css.publishDate}>
                      üìÖ
                      {' '}
                      {formatDate(post.metadata.date)}
                    </div>
                    {post.metadata.category && (
                      <span className={css.category}>
                        {post.metadata.category}
                      </span>
                    )}
                  </div>
                </div>

                {post.metadata.excerpt && (
                  <p className={css.postExcerpt}>{post.metadata.excerpt}</p>
                )}

                {post.metadata.tags && post.metadata.tags.length > 0 && (
                  <div className={css.postTags}>
                    {post.metadata.tags.map((postTag) => (
                      <Link
                        key={postTag}
                        href={`/blog/tag/${encodeURIComponent(postTag)}`}
                        className={`${css.tag} ${postTag === tag ? css.active : ''}`}
                      >
                        #
                        {postTag}
                      </Link>
                    ))}
                  </div>
                )}

                <Link href={`/blog/${post.slug}`} className={css.readMore}>
                  –ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ ‚Üí
                </Link>
              </div>
            </article>
          ))}
        </div>
      )}

      {totalPages > 1 && (
        <Pagination
          currentPage={currentPage}
          totalPages={totalPages}
          baseUrl={`/blog/tag/${encodeURIComponent(tag)}`}
        />
      )}
    </div>
  );
}
